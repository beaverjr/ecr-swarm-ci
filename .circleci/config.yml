version: 2
jobs:
  build:
    docker:
      - image: circleci/golang:1.8
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Setup common environment variables
          command: |
            echo 'export ECR_REPOSITORY_NAME_WP="wp"' >> $BASH_ENV
            echo 'export ECR_REPOSITORY_NAME_MYSQL="mysql"' >> $BASH_ENV
            echo 'export ECR_REPOSITORY_NAME_NGINX="nginx"' >> $BASH_ENV
            echo 'export ECR_REPOSITORY_NAME_PHPFPM="php-fpm"' >> $BASH_ENV
            echo 'export FULL_IMAGE_NAME_WP="${AWS_ACCOUNT_ID}.dkr.ecr.ap-northeast-1.amazonaws.com/${ECR_REPOSITORY_NAME_WP}:${CIRCLE_SHA1}"' >> $BASH_ENV
            echo 'export FULL_IMAGE_NAME_MYSQL="${AWS_ACCOUNT_ID}.dkr.ecr.ap-northeast-1.amazonaws.com/${ECR_REPOSITORY_NAME_MYSQL}:${CIRCLE_SHA1}"' >> $BASH_ENV
            echo 'export FULL_IMAGE_NAME_NGINX="${AWS_ACCOUNT_ID}.dkr.ecr.ap-northeast-1.amazonaws.com/${ECR_REPOSITORY_NAME_NGINX}:${CIRCLE_SHA1}"' >> $BASH_ENV
            echo 'export FULL_IMAGE_NAME_PHPFPM="${AWS_ACCOUNT_ID}.dkr.ecr.ap-northeast-1.amazonaws.com/${ECR_REPOSITORY_NAME_PHPFPM}:${CIRCLE_SHA1}"' >> $BASH_ENV
      - run:
          name: Build image
          command: |
            pwd
            ls -al ./
            docker build -t $FULL_IMAGE_NAME_WP -f ./wp/Dockerfile .
            docker build -t $FULL_IMAGE_NAME_MYSQL -f ./mysql/Dockerfile .
            docker build -t $FULL_IMAGE_NAME_NGINX -f ./nginx/Dockerfile .
            docker build -t $FULL_IMAGE_NAME_PHPFPM -f ./php-fpm/Dockerfile .
      - run:
          name: Test image
          command: |
            docker run -d -p 8000:80 --name wp-test $FULL_IMAGE_NAME_WP
            docker run -d --name mysql-test $FULL_IMAGE_NAME_MYSQL
            docker run -d -p 8080:80 --name nginx-test $FULL_IMAGE_NAME_NGINX
            docker run -d --name phpfpm-test $FULL_IMAGE_NAME_PHPFPM
            
      - run:
          name: Save image to an archive
          command: |
            mkdir docker-image
            docker save -o docker-image/image_wp.tar $FULL_IMAGE_NAME_WP
            docker save -o docker-image/image_mysql.tar $FULL_IMAGE_NAME_MYSQL
            docker save -o docker-image/image_nginx.tar $FULL_IMAGE_NAME_NGINX
            docker save -o docker-image/image_phpfpm.tar $FULL_IMAGE_NAME_PHPFPM
      - persist_to_workspace:
          root: .
          paths:
            - docker-image
  deploy:  
    docker:
      - image: circleci/python:3.6.1
    environment:
      AWS_DEFAULT_OUTPUT: json
    steps:
      - checkout
      - setup_remote_docker:
          version: 18.06.0-ce
      - attach_workspace:
          at: workspace
      - restore_cache:
          key: v1-{{ checksum "requirements.txt" }}
      - run:
          name: Install awscli
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache:
          key: v1-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run:
          name: Load image
          command: |
            docker load --input workspace/docker-image/image_wp.tar
            docker load --input workspace/docker-image/image_mysql.tar
            docker load --input workspace/docker-image/image_nginx.tar
            docker load --input workspace/docker-image/image_phpfpm.tar
      - run:
          name: Setup common environment variables
          command: |
            echo 'export ECR_REPOSITORY_NAME_WP="wp"' >> $BASH_ENV
            echo 'export ECR_REPOSITORY_NAME_MYSQL="mysql"' >> $BASH_ENV
            echo 'export ECR_REPOSITORY_NAME_NGINX="nginx"' >> $BASH_ENV
            echo 'export ECR_REPOSITORY_NAME_PHPFPM="php-fpm"' >> $BASH_ENV
            echo 'export FULL_IMAGE_NAME_WP="${AWS_ACCOUNT_ID}.dkr.ecr.ap-northeast-1.amazonaws.com/${ECR_REPOSITORY_NAME_WP}:${CIRCLE_SHA1}"' >> $BASH_ENV
            echo 'export FULL_IMAGE_NAME_MYSQL="${AWS_ACCOUNT_ID}.dkr.ecr.ap-northeast-1.amazonaws.com/${ECR_REPOSITORY_NAME_MYSQL}:${CIRCLE_SHA1}"' >> $BASH_ENV
            echo 'export FULL_IMAGE_NAME_NGINX="${AWS_ACCOUNT_ID}.dkr.ecr.ap-northeast-1.amazonaws.com/${ECR_REPOSITORY_NAME_NGINX}:${CIRCLE_SHA1}"' >> $BASH_ENV
            echo 'export FULL_IMAGE_NAME_PHPFPM="${AWS_ACCOUNT_ID}.dkr.ecr.ap-northeast-1.amazonaws.com/${ECR_REPOSITORY_NAME_PHPFPM}:${CIRCLE_SHA1}"' >> $BASH_ENV
      - run:
          name: Push image
          command: |
            . venv/bin/activate
            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
            docker push $FULL_IMAGE_NAME_WP
            docker push $FULL_IMAGE_NAME_MYSQL
            docker push $FULL_IMAGE_NAME_NGINX
            docker push $FULL_IMAGE_NAME_PHPFPM
  deploy_api:
    machine:
      image: circleci/classic:201808-01
      enabled: true
    steps:
      - checkout
      - run:
          name: Setup common environment variables
          command: |
            echo 'export ECR_REPOSITORY_NAME_WP="wp"' >> $BASH_ENV
            echo 'export ECR_REPOSITORY_NAME_MYSQL="mysql"' >> $BASH_ENV
            echo 'export ECR_REPOSITORY_NAME_NGINX="nginx"' >> $BASH_ENV
            echo 'export ECR_REPOSITORY_NAME_PHPFPM="php-fpm"' >> $BASH_ENV
      - run:
          name: Deploy
          command: |
            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
            echo '-----BEGIN CERTIFICATE-----' > ca.pem && echo $CA_PEM | sed -e 's/\s\+/\n/g' >> ca.pem && echo '-----END CERTIFICATE-----' >> ca.pem
            echo '-----BEGIN CERTIFICATE-----' > cert.pem && echo $CERT_PEM | sed -e 's/\s\+/\n/g' >> cert.pem && echo '-----END CERTIFICATE-----' >> cert.pem
            echo '-----BEGIN RSA PRIVATE KEY-----' > key.pem && echo $KEY_PEM | sed -e 's/\s\+/\n/g' >> key.pem && echo '-----END RSA PRIVATE KEY-----' >> key.pem
            docker --tls --tlscacert=ca.pem --tlscert=cert.pem --tlskey=key.pem -H tcp://$SERVER_IP:2376 stack deploy wp-test -c ./docker-compose-wp.yml --with-registry-auth
            docker --tls --tlscacert=ca.pem --tlscert=cert.pem --tlskey=key.pem -H tcp://$SERVER_IP:2376 stack deploy np-test -c ./docker-compose-np.yml --with-registry-auth
            docker --tls --tlscacert=ca.pem --tlscert=cert.pem --tlskey=key.pem -H tcp://$SERVER_IP:2376 service ls
workflows:
  version: 2
  build_deploy:
    jobs:
      - build
      - deploy: 
          requires:
            - build
      - deploy_api:
          requires:
            - deploy
          filters: 
            branches:
              only: 
           
